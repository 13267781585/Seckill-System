spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/seckill?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
mybatis.type-aliases-package=com.gzhu.pojo

pagehelper.helper-dialect=mysql
pagehelper.reasonable=true

server.port=8081

mybatis.configuration.map-underscore-to-camel-case=true

##redis
spring.redis.database=0
spring.redis.host=localhost
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=123456
# 连接超时时间 单位 ms（毫秒）
spring.redis.timeout=3000

#spring session使用存储类型，默认就是redis所以可以省略
spring.session.store-type=redis

#rabbitmq
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
#开启confirm机制
spring.rabbitmq.publisher-confirms=true
#开启return机制
spring.rabbitmq.publisher-returns=false
#手动应答
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.direct.acknowledge-mode=manual
#开启消费端消息重试
spring.rabbitmq.listener.simple.retry.enabled=true
spring.rabbitmq.listener.simple.retry.max-attempts=3
# 重试最大间隔时间
spring.rabbitmq.listener.simple.retry.max-interval=10000
# 重试初始间隔时间
spring.rabbitmq.listener.simple.retry.initial-interval=2000
# 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间
spring.rabbitmq.listener.simple.retry.multiplier=2
spring.rabbitmq.listener.simple.prefetch=2

##rabbitmq参数配置
#订单过期时间
order.ttl.time=10000
rabbitmq.publish.retryCount=3

#前端密码固定salt
qianduan.fixedsalt=ysDtxxjFpJLF2jo8DMtvqu5XwYxxJK
houduan.changesalt=dZ70I25y73XLNC15fxtehc0hFqv4C6

#用户token过期事件 3天
user.loginTokenExpire=259200000

#重放攻击 salt 和 有效期
replay.enable=0
replay.salt=dZ70I25y73XLNC15fxtehc0hFqv4C6
replay.expire=600000000
##防御重放攻击的模式
#SERVER token从服务端获取 可以保证不被窃取和篡改 缺点是需要实时更新token,加大了服务器的压力
#CLINENT token从客户端生成 不能保证不被篡改 因为加密算法是透明的
replay.mode=SERVER

#重复提交
reCommit.enable=0

#crsf
crsf.enable=0

#秒杀配置
#忽略用户认证
seckill.userAuth=0